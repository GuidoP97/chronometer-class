{"version":3,"sources":["components/Chronometer.jsx","App.jsx","index.js"],"names":["TextStyle","styled","p","ButtonStyle","button","disabled","List","ul","Chronometer","state","hours","minutes","seconds","miliseconds","running","allTimestamps","started","handleStartClick","e","interval","setInterval","tick","setState","handleStopClick","clearInterval","handleTimestamp","timestamp","timestamps","push","handleReset","updateTimer","addZero","value","this","onClick","map","idx","id","Component","GlobalStyle","createGlobalStyle","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b063639.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { generate as id } from 'shortid'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst TextStyle = styled.p`\r\n`\r\n\r\nconst ButtonStyle = styled.button`\r\n    background-color: ${({disabled}) => disabled ? 'transparent' : '#387EF5'};\r\n    border:${({disabled}) => disabled ? '1px solid #387EF5' : 'none'};\r\n    outline:none;\r\n    border-radius:1rem;\r\n    padding:.5rem;\r\n    margin:.5rem;\r\n    font-weight:blod;\r\n    color:${({disabled}) => disabled ? '#4a5568' : '#ffddaa'};\r\n`\r\n\r\nconst List = styled.ul`\r\n    list-style:none;\r\n    padding-left:0;\r\n`\r\n\r\nclass Chronometer extends Component {\r\n\r\n    state = {\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        miliseconds: 0,\r\n        running: false,\r\n        allTimestamps: [],\r\n        started: false\r\n    }\r\n\r\n    //Función que se llama con el boton start\r\n    handleStartClick = (e) => {\r\n        if(!this.state.running){\r\n            this.interval = setInterval(()=>{\r\n                this.tick()\r\n            }, 100)\r\n\r\n            this.setState({\r\n                running: true,\r\n                started: true\r\n            })\r\n    }\r\n}\r\n\r\n    //Conteo del cronómetro\r\n    tick() {\r\n        let {hours} = this.state\r\n        let {minutes} = this.state\r\n        let {seconds} = this.state\r\n        let miliseconds = this.state.miliseconds + 1\r\n\r\n        if(miliseconds === 10){\r\n            miliseconds = 0;\r\n            seconds = seconds + 1\r\n        }\r\n\r\n        if(seconds === 60){\r\n            seconds = 0;\r\n            minutes = minutes + 1\r\n        }\r\n\r\n        if(minutes === 60){\r\n            minutes = 0;\r\n            hours = hours + 1\r\n        }\r\n\r\n        this.updateTimer(miliseconds, seconds, minutes, hours)\r\n    }\r\n\r\n    //Función que se llama con el boton stop\r\n    handleStopClick = () => {\r\n        if(this.state.running){\r\n            clearInterval(this.interval)\r\n            this.setState({\r\n                running: false\r\n            })\r\n        }\r\n    }\r\n\r\n    //Función que se llama con el boton timestamp\r\n    handleTimestamp = () => {\r\n        const {hours, minutes, seconds, miliseconds, allTimestamps} = this.state\r\n\r\n        const timestamp = {hours, minutes, seconds, miliseconds}\r\n\r\n        const timestamps = allTimestamps\r\n\r\n        timestamps.push(timestamp)\r\n\r\n        this.setState({allTimestamps: timestamps})\r\n    }\r\n\r\n    //Función que se llama con el boton reset\r\n    handleReset = (e) => {\r\n        this.updateTimer(0,0,0,0)\r\n        this.setState({ allTimestamps: [], started: false })\r\n    }\r\n\r\n    //Función de actualización del estado\r\n    updateTimer(miliseconds, seconds, minutes, hours) {\r\n        this.setState({\r\n            miliseconds,\r\n            seconds,\r\n            minutes,\r\n            hours\r\n        })\r\n    }\r\n\r\n    addZero = (value) =>{\r\n        return value < 10 ? `0${value}` : `${value}`\r\n    }\r\n\r\n    render() {\r\n        let {hours, minutes, seconds, miliseconds, running, allTimestamps, started} = this.state\r\n        hours = this.addZero(hours)\r\n        minutes = this.addZero(minutes)\r\n        seconds = this.addZero(seconds)\r\n        miliseconds = this.addZero(miliseconds)\r\n\r\n        return (\r\n            <>\r\n                <TextStyle>{`${hours} : ${minutes} : ${seconds} : ${miliseconds}`}</TextStyle>\r\n                <ButtonStyle \r\n                disabled={running}\r\n                onClick={this.handleStartClick}\r\n                >START</ButtonStyle>\r\n                <ButtonStyle \r\n                disabled={!running} \r\n                onClick={this.handleStopClick}\r\n                >STOP</ButtonStyle>\r\n                <ButtonStyle \r\n                disabled={!running} \r\n                onClick={this.handleTimestamp}\r\n                >TIMESTAMP</ButtonStyle>\r\n                {started && \r\n                <ButtonStyle disabled={running} onClick={this.handleReset}>RESET</ButtonStyle>}\r\n\r\n                <List>\r\n                    {\r\n                        allTimestamps.map((timestamp, idx)=>(\r\n                            <li key={id()} >\r\n                             {`\r\n                                ${idx + 1} -\r\n                                ${this.addZero(timestamp.hours)} :\r\n                                ${this.addZero(timestamp.minutes)} :\r\n                                ${this.addZero(timestamp.seconds)} :\r\n                                ${this.addZero(timestamp.miliseconds)}\r\n                             `}\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chronometer;","import React, { Component } from 'react'\n\nimport Chronometer from './components/Chronometer'\n\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\nbody{\n    background-color:#222;\n    color:#387EF5;\n    text-align:center;\n    font-size:2rem;\n    font-weight:bolder;\n}\n`\n\nclass App extends Component {\n\n    render() {\n        return (\n            <>\n                <GlobalStyle/>\n                <h1>Chronometer</h1>\n                <Chronometer />\n            </>\n        )\n    }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}